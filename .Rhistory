allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
?plot
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
allHands
length(allHands)
handRanks
handRanks[2]
handRanks[2, ]
?sum
sum(handRanks)
sum(handRanks[2, ])
?rep
rep(c(1,2), 2, 20)
rep(c(1,2), 2, 20, 2)
rep(1:3, 2, 20, 2)
rep(1:3, 20, 2)
rep(1:3, 2)
rep(1:3, length.out = 20, 2)
rep(1:3, length.out = 20)
rep(1:3, length.out = 20, each = 2)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
warnings()
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
numHands = 50
whoIsBank = rep(1:numBank, length.out = numHands, each = 2)
whoIsBank
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
min(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
var(finalStack)
?var
R.version
source('D:/programming/work/realEstateFlipper/realEstateFlipper/flipPredictTest.R')
flippedSplit[55]
boxplot(flippedSplit[[55]]$predictedSalePrice)
boxplot(flippedSplit[[55]]$actualSell.Price.Num)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
?ggplot
ggplot(flippedSplit[[36]], aes(x = Parcel.Number, y = actualSell.Price.Num))
geom_point()
flippedSplit[[36]]
ggplot(flippedSplitReport, aes(x = Parcel.Number, y = actualSell.Price.Num))
geom_point()
ggplot(flippedSplit[[36]], aes(x = Parcel.Number, y = actualSell.Price.Num)) +
geom_point()
head(flippedSplitReport)
?order
flippedSplitReport <- flippedSplitReport[order(flippedSplitReport[,23], flippedSplitReport[,3]), ]
head(flippedSplitReport)
flipParcelTest <- sapply(seq_along(flippedSplitReport), function(x) {x})
head(flipParcelTest)
flippedSplitReport[,"futureActualHouseRatio"] <- NA
head(flippedSplitReport)
flippedSplitReport[,"futureActualHouseSqFt", "futureActualDollarPerSF", "futureActualSellPrice"] <- NA
flippedSplitReport[,c("futureActualHouseSqFt", "futureActualDollarPerSF", "futureActualSellPrice")] <- NA
flipReportTest <- complete.cases(flippedSplitReport)
flipReportTest <- complete.cases(flippedSplitReport[,23])
flipParcelTest <- sapply(seq_along(flippedSplitReport), function(x) {flippedSplitReport[x,24] <- flippedSplitReport[x+1, 4]})
head(flipParcelTest)
head(flippedSplitReport$actual.house.To.Lot.Size.Ratio)
tail(flipParcelTest)
tail(flippedSplitReport$actual.house.To.Lot.Size.Ratio)
seq_along(flippedSplitReport)
seq_along(nrow(flippedSplitReport))
?seq_along
?apply
flipParcelTest <- apply(flippedSplitReport, 1, function(x) {flippedSplitReport[x,24] <- flippedSplitReport[x+1, 4]})
flipParcelTest <- apply(seq_along(flippedSplitReport), 1, function(x) {flippedSplitReport[x,24] <- flippedSplitReport[x+1, 4]})
flipParcelTest <- sapply(1:nrow(flippedSplitReport), function(x) {flippedSplitReport[x,24] <- flippedSplitReport[x+1, 4]})
tail(flippedSplitReport$actual.house.To.Lot.Size.Ratio)
tail(flipParcelTest)
flipParcelTest <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23]) flippedSplitReport[x,24] <- flippedSplitReport[x+1, 4]})
flippedSplitReport[300, 23]
flippedSplitReport[326, 23]
flippedSplitReport[327, 23]
flippedSplitReport[300, 23] == flippedSplitReport[301, 23]
flippedSplitReport[301, 23] == flippedSplitReport[302, 23]
flippedSplitReport[326, 23] == flippedSplitReport[327, 23]
if(flippedSplitReport[326, 23] == flippedSplitReport[327, 23]) 1
flipParcelTest <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) flippedSplitReport[x,24] <- flippedSplitReport[x+1, 4]})
head(flipParcelTest)
str(flipParcelTest)
head(flippedSplitReport)
flipParcelTest <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) flippedSplitReport[x+1, 4]})
flipParcelTest <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, 4]} else NA})
head(flipParcelTest)
tail(flippedSplitReport$actual.house.To.Lot.Size.Ratio)
tail(flipParcelTest)
flipParcelTest <- flippedSplitReport
flipParcelTest[,24] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, 4]} else NA})
head(flipParcelTest)
flipParcelTest2 <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else NA})
head(flipParcelTest2)
flipParcelTest2 <- flippedSplitReport
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else NA})
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {data.frame(flippedSplitReport[x+1, c(4,6)])} else NA})
?data.frame
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {cbind(flippedSplitReport[x+1, c(4,6)])} else NA})
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {cbind.data.frame(flippedSplitReport[x+1, c(4,6)])} else NA})
flippedSplitReport[300, c(4,6)]
flippedSplitReport[300, 4]
unname(flippedSplitReport[300, c(4,6)])
cbind(flippedSplitReport[300, 4,], flippedSplitReport[300, 6])
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else NA})
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else c(NA,NA)})
flipParcelTest3<- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else c(NA,NA)})
head(flipParcelTest3)
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else data.frame({NA, NA})})
flipParcelTest2[, 24:25] <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else data.frame(c(NA, NA))})
flipParcelTest3 <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else data.frame(c(NA, NA))})
head(flipParcelTest3)
flipParcelTest3 <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else data.frame(z = c(NA, NA))})
head(flipParcelTest3)
flipParcelTest3 <- sapply(1:nrow(flippedSplitReport), function(x) {if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] & !is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, c(4,6)]} else data.frame(1, c(NA, NA))})
head(flipParcelTest3)
summary(flipParcelTest)
flippedSplitReport[,24] <- sapply(1:nrow(flippedSplitReport), function(x) {
if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] &
!is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, 4]} else NA})
flippedSplitReport[,25] <- sapply(1:nrow(flippedSplitReport), function(x) {
if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] &
!is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, 6]} else NA})
flippedSplitReport[,26] <- sapply(1:nrow(flippedSplitReport), function(x) {
if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] &
!is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, 8]} else NA})
flippedSplitReport[,27] <- sapply(1:nrow(flippedSplitReport), function(x) {
if(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23] &
!is.na(flippedSplitReport[x, 23] == flippedSplitReport[x+1, 23])) {flippedSplitReport[x+1, 12]} else NA})
head(flippedSplitReport)
flipReportTest <- complete.cases(flippedSplitReport)
flipReportTest <- flippedSplitReport[complete.cases(flippedSplitReport),]
summary(flipReportTest)
head(flipReportTest)
flippedSplit[4]
flipReportComplete <- flippedSplitReport[complete.cases(flippedSplitReport),]
summary(flipReportComplete)
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualHouseSqFt)) +
geom_point()
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_point()
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_point()
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_point() +
geom_point(aes(y = predictedSalPrice), shape = 1)
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_point() +
geom_point(aes(y = predictedSalePrice), shape = 1)
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_segment(aes(xend = Parcel.Number, yend = predictedSalePrice)) +
geom_point() +
geom_point(aes(y = predictedSalePrice), shape = 1)
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualHouseSqFt))
geom_point()
ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = Parcel.Number, yend = predictedSalePrice)) +
geom_point() +
geom_point(aes(y = predictedSalePrice), shape = 1) +
theme_bw()
flipReportComplete[,"priceResidual"] <- flipReportComplete$futureActualSellPrice - flipReportComplete$predictedSalePrice
head(flipReportComplete)
install.packages("plotly")
library(plotly)
errorPlot <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_segment(aes(xend = Parcel.Number, yend = predictedSalePrice), alpha = .5) +
geom_point(aes(color = abs(priceResidual), size = abs(priceResidual))) +
scale_color_continuous(low = "black", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predictedSalePrice), shape = 1) +
theme_bw()
errorPlot
errorPlotInter <- ggplotly(errorPlot)
errorPlotInter
errorPlot <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
+ geom_segment(aes(xend = Parcel.Number, yend = predictedSalePrice), alpha = .5) +
+ geom_point(aes(color = priceResidual, size = abs(priceResidual))) +
+ scale_color_gradient2(low = "blue", mid = "white", high = "red") +
+ guides(color = FALSE, size = FALSE) +
+ geom_point(aes(y = predictedSalePrice), shape = 1) +
+ theme_bw()
>errorPlot <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +geom_segment(aes(xend = Parcel.Number, yend = predictedSalePrice), alpha = .5) +
+     + geom_point(aes(color = priceResidual, size = abs(priceResidual))) +
+     + scale_color_gradient2(low = "blue", mid = "white", high = "red") +
+     + guides(color = FALSE, size = FALSE) +
+     + geom_point(aes(y = predictedSalePrice), shape = 1) +
+     + theme_bw()
errorPlot <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_segment(aes(xend = Parcel.Number, yend = predictedSalePrice), alpha = .5) +
geom_point(aes(color = priceResidual, size = abs(priceResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predictedSalePrice), shape = 1) +
theme_bw()
errorPlotInter <- ggplotly(errorPlot)
errorPlotInter
summary(flipReportComplete)
flipReportComplete[,"houseRatioResidual"] <- flipReportComplete$futureActualHouseRatio -
flipReportComplete$pred.houseRatioNewBuild
flipReportComplete[,"houseSizeResidual"] <- flipReportComplete$futureActualHouseSqFt -
flipReportComplete$predictHouseSizeSqFt
flipReportComplete[,"dollarPerSFResidual"] <- flipReportComplete$futureActualDollarPerSF -
flipReportComplete$predHouseDollarPerSFNewBuild
errorPlotRatio <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualHouseRatio)) +
geom_segment(aes(xend = Parcel.Number, yend = pred.houseRatioNewBuild), alpha = .5) +
geom_point(aes(color = houseRatioResidual, size = abs(houseRatioResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = pred.houseRatioNewBuild), shape = 1) +
theme_bw()
errorPlotInterRatio <- ggplotly(errorPlotRatio)
errorPlotInterRatio
errorPlotRatio <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualHouseSqFt)) +
geom_segment(aes(xend = Parcel.Number, yend = predictHouseSizeSqFt), alpha = .5) +
geom_point(aes(color = houseSizeResidual, size = abs(houseSizeResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predictHouseSizeSqFt), shape = 1) +
theme_bw()
errorPlotInterRatio <- ggplotly(errorPlotRatio)
errorPlotSize <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualHouseSqFt)) +
geom_segment(aes(xend = Parcel.Number, yend = predictHouseSizeSqFt), alpha = .5) +
geom_point(aes(color = houseSizeResidual, size = abs(houseSizeResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predictHouseSizeSqFt), shape = 1) +
theme_bw()
errorPlotInterSize <- ggplotly(errorPlotRatio)
errorPlotInterSize
errorPlotDPS <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualDollarPerSF)) +
geom_segment(aes(xend = Parcel.Number, yend = predHouseDollarPerSFNewBuild), alpha = .5) +
geom_point(aes(color = dollarPerSFResidual, size = abs(dollarPerSFResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predHouseDollarPerSFNewBuild), shape = 1) +
theme_bw()
errorPlotInterDPS <- ggplotly(errorPlotRatio)
errorPlotInterDPS
errorPlotRatio <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualHouseRatio)) +
geom_segment(aes(xend = Parcel.Number, yend = pred.houseRatioNewBuild), alpha = .5) +
geom_point(aes(color = houseRatioResidual, size = abs(houseRatioResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = pred.houseRatioNewBuild), shape = 1) +
theme_bw()
errorPlotInterRatio <- ggplotly(errorPlotRatio)
errorPlotInterRatio
errorPlotInterPrice
errorPlotPrice <- ggplot(flipReportComplete, aes(x = Parcel.Number, y = futureActualSellPrice)) +
geom_segment(aes(xend = Parcel.Number, yend = predictedSalePrice), alpha = .5) +
geom_point(aes(color = priceResidual, size = abs(priceResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predictedSalePrice), shape = 1) +
theme_bw()
errorPlotInterPrice <- ggplotly(errorPlotPrice)
errorPlotInterPrice
errorPlotInterSize
errorPlotInterDPS
errorPlotInterPrice
summary(flipReportComplete)
factor(flipReportComplete$Postal.City)
unique(factor(flipReportComplete$Postal.City))
hist(flipReportComplete$Postal.City)
hist(table(flipReportComplete$Postal.City))
hist(table(factor(flipReportComplete$Postal.City)))
table(factor(flipReportComplete$Postal.City))
errorPlotInterPrice
flippedSplitReport[flippedSplitReport$Parcel.Number = "336-20-018",]
flippedSplitReport[flippedSplitReport$Parcel.Number == "336-20-018",]
flippedSplitReport[flippedSplitReport$Parcel.Number == "189-42-064",]
flippedSplitReport[flippedSplitReport$Parcel.Number == "071-434-110",]
errorPlotPriceDate <- ggplot(flipReportComplete, aes(x = Sale.Date, y = futureActualSellPrice)) +
geom_segment(aes(xend = Sale.Date, yend = predictedSalePrice), alpha = .5) +
geom_point(aes(color = priceResidual, size = abs(priceResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predictedSalePrice), shape = 1) +
theme_bw()
errorPlotInterPriceDate <- ggplotly(errorPlotPriceDate)
errorPlotInterPriceDate
errorPlotRatioDate <- ggplot(flipReportComplete, aes(x = Sale.Date, y = futureActualHouseRatio)) +
geom_segment(aes(xend = Sale.Date, yend = pred.houseRatioNewBuild), alpha = .5) +
geom_point(aes(color = houseRatioResidual, size = abs(houseRatioResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = pred.houseRatioNewBuild), shape = 1) +
theme_bw()
errorPlotInterRatioDate <- ggplotly(errorPlotRatioDate)
errorPlotInterRatioDate
errorPlotPriceArea <- ggplot(flipReportComplete, aes(x = Area.., y = futureActualSellPrice)) +
geom_segment(aes(xend = Area.., yend = predictedSalePrice), alpha = .5) +
geom_point(aes(color = priceResidual, size = abs(priceResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = predictedSalePrice), shape = 1) +
theme_bw()
errorPlotInterPriceArea <- ggplotly(errorPlotPriceArea)
errorPlotInterPriceArea
errorPlotRatioArea <- ggplot(flipReportComplete, aes(x = Area.., y = futureActualHouseRatio)) +
geom_segment(aes(xend = Area.., yend = pred.houseRatioNewBuild), alpha = .5) +
geom_point(aes(color = houseRatioResidual, size = abs(houseRatioResidual))) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE, size = FALSE) +
geom_point(aes(y = pred.houseRatioNewBuild), shape = 1) +
theme_bw()
errorPlotInterRatioArea <- ggplotly(errorPlotRatioArea)
errorPlotInterRatioArea
errorPlotInterPriceArea
