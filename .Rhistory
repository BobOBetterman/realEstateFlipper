source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
dealerHandRanks = sort( sapply(allHands[[1]][,"rank"],function(x) which(x == ranks_acehigh)) )
dealerHandRanks
dealerHandRanks[1]
str(dealerHandRanks[1])
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[2]]
allHands[[1]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
ranks_acehigh = c(2:10,"J","Q","K","A")
playerHandRanks = sort( sapply(allHands[[2]][,"rank"],function(x) which(x == ranks_acehigh)) )
playerHandRanks
(handRanks[2, ])[1] > 1 || ((handRanks[2, ])[1] == 1 && playerHandRanks[3] > 10 && playerHandRanks[2] > 5 && playerHandRanks[1] > 3)
(handRanks[2, ])[1] > 1
(handRanks[2, ])[1] == 1
playerHandRanks[3] > 10
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
playerPayout
allHands[[1]]
allHands[[2]]
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
?plot
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
allHands
length(allHands)
handRanks
handRanks[2]
handRanks[2, ]
?sum
sum(handRanks)
sum(handRanks[2, ])
?rep
rep(c(1,2), 2, 20)
rep(c(1,2), 2, 20, 2)
rep(1:3, 2, 20, 2)
rep(1:3, 20, 2)
rep(1:3, 2)
rep(1:3, length.out = 20, 2)
rep(1:3, length.out = 20)
rep(1:3, length.out = 20, each = 2)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
warnings()
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
numHands = 50
whoIsBank = rep(1:numBank, length.out = numHands, each = 2)
whoIsBank
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
finalStack
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
plot(finalStack)
min(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
source('D:/programming/personal/bankingSimulation/bankingSimulation.R')
min(finalStack)
plot(finalStack)
var(finalStack)
?var
R.version
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
?aggregate
aggregate(propListingsSold$house.To.Lot.Size.Ratio, propListingsSold$Area.., FUN = mean)
?factor
levels(propListingsSold$Area..)
levels(factor(propListingsSold$Area..))
aggregate(propListingsSold$house.To.Lot.Size.Ratio, levels(factor(propListingsSold$Area..)), FUN = mean)
?list
aggregate(propListingsSold$house.To.Lot.Size.Ratio, as.list(levels(factor(propListingsSold$Area..))), FUN = mean)
aggregate(propListingsSold$Area..~propListingsSold$house.To.Lot.Size.Ratio, FUN = mean)
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = mean)
propListingsSold[propListingsSold$Area.. == 200, ]
mean(propListingsSold[propListingsSold$Area.. == 201, propListingsSold$house.To.Lot.Size.Ratio]
)
propListingsSold[propListingsSold$Area.. == 201, ]
mean([,propListingsSold[propListingsSold$Area.. == 201, ]$house.To.Lot.Size.Ratio])
mean(propListingsSold[propListingsSold$Area.. == 201, ]$house.To.Lot.Size.Ratio)
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = mean)
?complete.cases
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = mean)
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = quantile(x, probs = 0.95))
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = quantile(..., probs = 0.95))
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = quantile( probs = 0.95))
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = quantile)
?aggregate
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = quantile, probs = 0.95)
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = quantile, probs = 0.75)
aggregate(propListingsSold$house.To.Lot.Size.Ratio, list(propListingsSold$Area..), FUN = quantile, probs = 0.9)
summary(propListingsSold)
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
houseRatioByArea
houseRatioByZip
houseRatioByCity
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
summary(factor(propListingsSold$Area..))
summary(factor(propListingsSold$Zip.Code))
summary(factor(propListingsSold$Postal.City))
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
summary(propListingsSold)
summary(factor(propListingsSold$Area..))
houseRatioByArea
houseRatioByZip
houseRatioByCity
aggregate(propListingsSold$houseSqFt, list(propListingsSold$Area..), FUN = max
)
aggregate(propListingsSold$houseSqFt, list(propListingsSold$Area..), FUN = max)
aggregate(propListingsSold$sell.Price.Num, list(propListingsSold$Area..), FUN = max)
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
houseSizeCap
houseSizeCap$200
houseSizeCap$Group.1
propListingsActive$Area.. == houseSizeCap$Group.1
?which
which(propListingsActive$Area.. == houseSizeCap$Group.1)
library(dplyr)
?filter
?is.element
propListingsActive[is.element(propListingsActive$Area.., houseSizeCap),]
is.element(propListingsActive$Area.., houseSizeCap)
filter(propListingsActive, propListingsActive$Area.. %in% houseSizeCap$Group.1)
filter(propListingsActive, propListingsActive$Area.. %in% houseSizeCap$Group.1,)
filter(propListingsActive, propListingsActive$Area.. %in% houseSizeCap$Group.1)
propListingsActive
pmin(propListingsActive$lotSqFt * houseRatio, houseSizeCap[houseSizeCap$Group.1 == propListingsActive$Area.., 2])
?match
propListingsActive[match(houseSizeCap$Group.1, propListingsActive$Area..), ]
propListingsActive[match(propListingsActive$Area.., houseSizeCap$Group.1), ]
match(propListingsActive$Area.., houseSizeCap$Group.1)
match(houseSizeCap$Group.1, propListingsActive$Area..)
houseSizeCap[match(propListingsActive$Area.., houseSizeCap$Group.1,2)
]
houseSizeCap[match(propListingsActive$Area.., houseSizeCap$Group.1,2)]
houseSizeCap[match(propListingsActive$Area.., houseSizeCap$Group.1,)]
houseSizeCap[match(propListingsActive$Area.., houseSizeCap$Group.1),2]
houseSizeCap
propListingsActive
housePriceCap[match(propListingsActive$Area.., houseSizeCap$Group.1),2]
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
houseSizeCap
housePriceCap
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
houseSizeCap
housePriceCap
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
housePriceCap
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
housePriceCap
propListingsActive
housePriceCap
houseRatioByArea
table(factor(propListingsSold$Area..))
str(table(factor(propListingsSold$Area..)))
?merge
merge(houseRatioByArea, table(factor(propListingsSold$Area..)))
merge(houseRatioByArea, table(factor(propListingsSold$Area..)), by.x = "Group.1", by.y = "Var1")
houseRatioByArea
table(factor(propListingsSold$Area..))
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
houseRatioByArea
houseRatioByZip
houseRatioByCity
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propSoldOneYear
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propSoldOneYear
table(factor(propSoldOneYear$Area..))
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
table(factor(propSoldOneYear$Area..))
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
meanLastYear
meanLastYear[1]
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
meanLastYear
meanLastYear[2,1]
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
meanLastYearArea
meanLastYearZip
meanLastYearCity
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
meanLastYearArea
meanLastYearZip
meanLastYearCity
houseRatioByZip
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
?ifelse
houseSizeCap[match(propListingsActive$Area.., houseSizeCap$Group.1),2]
houseSizeCap
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
houseRatioByArea
houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2]
ifelse(houseRatioByArea>samples, houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2], .5)
ifelse(houseRatioByArea$Freq>samples, houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2], .5)
ifelse(houseRatioByArea$Freq>100, houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2], .5)
houseRatioByArea
propListingsActive[,39] <- ifelse(houseRatioByArea$Freq>100, houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2], .5)
match(propListingsActive$Area.., houseRatioByArea$Group.1),2
match(propListingsActive$Area.., houseRatioByArea$Group.1)
houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),3]
propListingsActive[,39] <- ifelse(houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),3]>10, houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2], .5)
propListingsActive
houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2]
propListingsActive[,39] <- ifelse(houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),3]>100, houseRatioByArea[match(propListingsActive$Area.., houseRatioByArea$Group.1),2], .5)
propListingsActive
houseRatioByArea
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
houseRatioByZip
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
houseRatioByZip
houseRatioByArea
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
houseRatioByArea
houseRatioByZip
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
meanLastYearArea
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
meanLastYearArea
meanLastYearZip
meanLastYearCity
match(propListingsActive$Area.., meanLastYearArea$Group.1)
meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]
as.numeric(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3])
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize
is.na(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
!is.na(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
!meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize
!is.na(!meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
?is.na
is.na(!meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
is.na(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
!(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
is.na(!(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize))
anyNA(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize
!is.na(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize & !is.na(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
!meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize & !is.na(meanLastYearArea[match(propListingsActive$Area.., meanLastYearArea$Group.1),3]>minSampleSize)
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
source('D:/programming/work/realEstateFlipper/realEstateFlipper/realEstateFlipper.R')
propListingsActive
propListingsActive$houseDollarPerSFNewBuild
predPriceFinal
